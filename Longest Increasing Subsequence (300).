
# Approach -1, standard dp solution:  O(n^2) time +  0(n) space
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        n=len(nums)
        if n<2:
            return n
        l=list()
        for i in range (n):
            l.append(1)
        for i in range (n):
            for j in range (i):
                if(nums[i]>nums[j] and 1+l[j]>l[i]):
                    l[i]=1+l[j]
        return max(l)
       
        
# Approach -2,  O(nlogn) time +  0(n) space
# Replace with immediate successor

from bisect import bisect_left
class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        n=len(nums)
        if n<2:
            return n
        l=list()
        for i in range (n):
 #bisect.bisect_left returns the leftmost place in the sorted list to insert the   given element.
            j=bisect_left(l, nums[i])
 #Replace the element with its immediate successor
            if j==0 and len(l)>0 :
                l.pop(j)
                l.insert(j,nums[i])
 #If immediate successor is not present and list is empty.
            elif j==0 and len(l)==0:
                l.insert(j,nums[i])
 #If there is no successor then insert element at the end.
            elif(len(l)==j):
                l.append(nums[i])
 #If immediate successor is present in between of the list, remove the immediate successor and insert current element
            else:
                l.pop(j)
                l.insert(j,nums[i])
       
        return len(set(l))   #remove duplicate element
           
#Note: 
#a  = [10,20,30,40]
#x = int(5)
#res = BinarySearch(a, x)
#print(res)  #output  4 - you can insert at index 4   

#Algorithm 
#Consider the example:
#input: [0, 8, 4, 12, 2]
#l: [0]
#l: [0, 8]
#l: [0, 4]
#l: [0, 4, 12]
#l: [0 , 2, 12] which is not the longest increasing subsequence, but length of list - l results in length of Longest Increasing Subsequence.
        
